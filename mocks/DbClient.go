// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	"github.com/kserevena/perkbox-tech-test-2/database"

	mock "github.com/stretchr/testify/mock"
)

// DbClient is an autogenerated mock type for the DbClient type
type DbClient struct {
	mock.Mock
}

// GetCoupon provides a mock function with given fields: id
func (_m *DbClient) GetCoupon(id string) (*database.Coupon, error) {
	ret := _m.Called(id)

	var r0 *database.Coupon
	if rf, ok := ret.Get(0).(func(string) *database.Coupon); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Coupon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoupons provides a mock function with given fields:
func (_m *DbClient) GetCoupons(*database.GetCouponsQueryFilter) ([]database.Coupon, error) {
	ret := _m.Called()

	var r0 []database.Coupon
	if rf, ok := ret.Get(0).(func() []database.Coupon); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Coupon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreCoupon provides a mock function with given fields: coupon
func (_m *DbClient) InsertCoupon(coupon *database.Coupon) error {
	ret := _m.Called(coupon)

	var r0 error
	if rf, ok := ret.Get(0).(func(*database.Coupon) error); ok {
		r0 = rf(coupon)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
